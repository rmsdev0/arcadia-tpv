import { Options } from 'yargs';
import { LoggingLevelNames } from './utils/logger';
export declare const baseCliOptions: {
    'log-level': Options;
    config: Options;
    cwd: Options;
    env: Options;
};
export declare const BASE_CLI_FLAG_NAMES: ("log-level" | "config" | "cwd" | "env")[];
export declare const sharedApiRelatedCliOptions: {
    region: Options;
    edge: Options;
    username: Options;
    password: Options;
    'load-system-env': Options;
};
export declare const BASE_API_FLAG_NAMES: ("password" | "username" | "region" | "edge" | "load-system-env")[];
export declare const ALL_FLAGS: {
    'service-sid': Options;
    'build-sid': Options;
    'source-environment': Options;
    environment: Options;
    production: Options;
    'create-environment': Options;
    force: Options;
    'service-name': Options;
    functions: Options;
    assets: Options;
    'assets-folder': Options;
    'functions-folder': Options;
    'override-existing-project': Options;
    properties: Options;
    'extended-output': Options;
    'function-sid': Options;
    tail: Options;
    'output-format': Options;
    'log-cache-size': Options;
    template: Options;
    'load-local-env': Options;
    port: Options;
    ngrok: Options;
    logs: Options;
    'detailed-logs': Options;
    live: Options;
    inspect: Options;
    'inspect-brk': Options;
    'legacy-mode': Options;
    'fork-process': Options;
    runtime: Options;
    key: Options;
    value: Options;
    'show-values': Options;
    region: Options;
    edge: Options;
    username: Options;
    password: Options;
    'load-system-env': Options;
    'log-level': Options;
    config: Options;
    cwd: Options;
    env: Options;
};
export declare type AvailableFlags = typeof ALL_FLAGS;
export declare type FlagNames = keyof AvailableFlags;
export declare function getRelevantFlags(flags: FlagNames[]): {
    [flagName: string]: Options;
};
export declare type BaseFlags = {
    logLevel: LoggingLevelNames;
};
export declare type BaseFlagNames = keyof BaseFlags;
export declare type SharedFlags = BaseFlags & {
    config: string;
    cwd?: string;
    env?: string;
};
export declare type SharedFlagNames = keyof SharedFlags;
export declare type SharedFlagsWithCredentials = SharedFlags & {
    username?: string;
    password?: string;
    region?: string;
    edge?: string;
    loadSystemEnv: boolean;
};
export declare type SharedFlagsWithCredentialNames = keyof SharedFlagsWithCredentials;
export declare type AllAvailableFlagTypes = SharedFlagsWithCredentials & {
    serviceSid?: string;
    buildSid?: string;
    sourceEnvironment?: string;
    environment: string;
    production: boolean;
    createEnvironment: boolean;
    force: boolean;
    serviceName?: string;
    functions: boolean;
    assets: boolean;
    assetsFolder?: string;
    functionsFolder?: string;
    overrideExistingProject: boolean;
    properties?: string;
    extendedOutput: boolean;
    functionSid?: string;
    tail: boolean;
    outputFormat?: 'json';
    logCacheSize?: number;
    template: string;
    loadLocalEnv: boolean;
    port?: number;
    ngrok?: string | boolean;
    logs: boolean;
    detailedLogs: boolean;
    live: boolean;
    inspect?: string;
    inspectBrk?: string;
    legacyMode: boolean;
    forkProcess: boolean;
    runtime?: string;
    key: string;
    value?: string;
    showValues: boolean;
};
