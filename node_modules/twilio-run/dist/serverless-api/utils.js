"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveLatestDeploymentData = exports.getFunctionServiceSid = void 0;
const global_1 = require("../config/global");
const deployInfoCache_1 = require("../utils/deployInfoCache");
const logger_1 = require("../utils/logger");
const debug = logger_1.getDebugFunction('twilio-run:internal:utils');
function getFunctionServiceSid(cwd, configName, commandConfig, username) {
    return __awaiter(this, void 0, void 0, function* () {
        const twilioConfig = global_1.readSpecializedConfig(cwd, configName, commandConfig, {
            username,
        });
        if (twilioConfig.serviceSid) {
            debug('Found serviceSid in config, "%s"', twilioConfig.serviceSid);
            return twilioConfig.serviceSid;
        }
        if (username) {
            debug('Attempting to read serviceSid from a deployinfo file');
            const deployInfoCache = deployInfoCache_1.getDeployInfoCache(cwd);
            if (deployInfoCache &&
                deployInfoCache[username] &&
                deployInfoCache[username].serviceSid) {
                debug('Found service sid from deploy info, "%s"', deployInfoCache[username].serviceSid);
                return deployInfoCache[username].serviceSid;
            }
        }
        debug('Could not determine existing serviceSid');
        return undefined;
    });
}
exports.getFunctionServiceSid = getFunctionServiceSid;
function saveLatestDeploymentData(cwd, serviceSid, buildSid, username) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!username) {
            return;
        }
        return deployInfoCache_1.updateDeployInfoCache(cwd, username, {
            serviceSid,
            latestBuild: buildSid,
        });
    });
}
exports.saveLatestDeploymentData = saveLatestDeploymentData;
